[tool.poetry]
name = "no-name"
version = "0.0.0"
description = "An example package. Generated with cookiecutter-pylibrary."
authors = [
    "Ugochukwu Nwosu"
    ]
license = "BSD 2-Clause License"
readme = "README.rst"
repository = "https://github.com/ugognw/python-no-name"
documentation = "https://python-no-name.readthedocs.io/"
keywords = [
    "Template",
]
packages = [
    { include = "no_name", from = "src" }
]
include = [
    "AUTHORS.rst",
    "CHANGELOG.rst",
    "CONTRIBUTING.rst",
    "LICENSE",
    "README.rst",
    ".bumpversion.cfg",
    ".cookiecutterrc.",
    ".coveragerc.",
    ".editorconfig",
    ".github/workflows/github-actions.yml",
    ".pre-commit-config.yaml",
    ".readthedocs.yml",
    "noxfile.py"
]
classifiers = [
        # complete classifier list: http://pypi.python.org/pypi?%3Aaction=list_classifiers
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: BSD License",
        "Operating System :: Unix",
        "Operating System :: POSIX",
        "Operating System :: Microsoft :: Windows",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: Implementation :: CPython",
]

[tool.poetry.scripts]
no_name = 'no_name.cli:main'

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
click = "*"

[tool.poetry.group.nox.dependencies]
nox-poetry = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-datadir = "*"
pytest-xdist = "*"

[tool.poetry.group.type_check.dependencies]
mypy = "*"

[tool.poetry.group.lint.dependencies]
ruff = "*"

[tool.poetry.group.format.dependencies]
black = "*"

[tool.poetry.group.vcs.dependencies]
pre-commit = "^2.20.0"
bump2version = "^1.0.1"
gitchangelog = "^3.0.4"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.0.1"
furo = "*"

[tool.black]
line-length = 79
target-version = ["py311"]
skip-string-normalization = true

[tool.coverage.paths]
source =[
   'src',
   '*/site-packages'
]

[tool.coverage.run]
branch = true

[tool.mypy]
ignore_missing_imports = true
strict = true

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "-ra",
    "--strict-markers",
    "--doctest-modules",
    "--doctest-glob=*.rst",
    "--tb=short"
]
filterwarnings = "error"
norecursedirs = "migrations"
python_files = [
    "test_*.py",
    "*_test.py",
    "tests.py"
]
testpaths = "tests"

[tool.ruff]
extend-exclude = ["static", "ci/templates"]
ignore = [
    "RUF001", # ruff-specific rules ambiguous-unicode-character-string
    "S101", # flake8-bandit assert
    "S308", # flake8-bandit suspicious-mark-safe-usage
    "E501", # pycodestyle line-too-long
]
line-length = 79
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "EXE", # flake8-executable
    "F", # pyflakes
    "I", # isort
    "INT", # flake8-gettext
    "N", # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint convention
    "PLE", # pylint errors
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RUF", # ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle warnings
]
src = ["src", "tests"]
target-version = "py311"

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.flake8-quotes]
inline-quotes = "single"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
forced-separate = ["conftest"]
force-single-line = true
force-sort-within-sections = true
split-on-trailing-comma = false

[tool.ruff.per-file-ignores]
"ci/*" = ["S"]
